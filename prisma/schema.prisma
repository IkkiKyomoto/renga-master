// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//deploy

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
 // uses connection pooling
  //directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  emailVerified Boolean @default(false)
  password  String
  name      String 
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hokkus    Hokku[]
  tsukekus  Tsukeku[]
  likes     Like[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Hokku {
  id        String   @id @default(uuid())
  description     String?
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  ikku String
  niku String
  sanku String
  tsukeku Tsukeku[]
  renga Renga?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tsukeku {
  id        String   @id @default(uuid()) 
  description     String?
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  hokku    Hokku     @relation(fields: [hokkuId], references: [id])
  hokkuId  String
  yonku String
  goku String
  renga Renga?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Renga {
  id        String   @id @default(uuid())
  hokku    Hokku     @relation(fields: [hokkuId], references: [id])
  hokkuId  String @unique
  tsukeku    Tsukeku     @relation(fields: [tsukekuId], references: [id])
  tsukekuId  String @unique
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  renga    Renga     @relation(fields: [rengaId], references: [id])
  rengaId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, rengaId])
}